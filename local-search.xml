<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GiHub Pages + Hexo ブログの爆誕</title>
    <link href="/2025/02/06/2025-02-06-post1/"/>
    <url>/2025/02/06/2025-02-06-post1/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>最近终于能从忙碌中脱身，挤出点时间做自己的事情。遂重拾这搁置多年的项目，开辟一个属于自己的天地(博客)，将我所经历的时光铭刻于文字中，而不是任凭它们随记忆消散。随着年龄增长，人逐渐被卷入社会的漩涡，与越来越广阔的世界交织，独属于自己的时间被逐渐增加的琐事蚕食。我开始意识到，若非难事，真正想做的事、珍视的事情，最适时机就是当下。无论多么忙碌，我们都需要保留一份独属于自己的闲暇，仔细耕耘内心的处女地，而非任凭琐事侵染，最终只留得一事无成的感慨。</p><p>碎碎念就到此为止 ......简单介绍对这个博客的想法。如前面所说，我建立这个博客的初衷就是记录日常所思所得，记录和谈论与我一切感兴趣领域：动漫、音乐、文学、物理、化学相关的话题。文章形式可能包括短评、技术日志、学习笔记、(碎碎念)等。虽是这样规划的，等真正开始之后大概也不会拘于形式，随性而写吧(笑)。(总之能够坚持下去就足够了)</p><p>以下是参考<a href="https://fanyfull.github.io/2021/10/16/Github-Hexo-%E7%9C%9F-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA-GitHub-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/">FanyFull's Blog</a>的搭建流程。</p><h1 id="背景">背景</h1><p>简单介绍GiHub Pages + Hexo approach的背景知识。</p><p>GitHubPages是GitHub提供的一项服务，可将托管在GitHub上一个仓库<code>username.github.io</code>中的html、css、js代码渲染成静态页面。每个GiHub账户只能有一个这样的仓库(仓库的可见性需设为public)。上传博客内容后，可通过域名https://www.username.github.io访问博客，这里<code>username</code>是自己的github用户名。使用GitHubPages搭建博客有诸多优点，如免费方便、数据绝对安全且能恢复历史版本、可灵活设计博客外观等。</p><h1 id="准备工作">准备工作</h1><ul><li>注册GitHub账号</li><li>安装git for windows (或其他git客户端)，并进行基本配置</li><li>安装node.js、npm</li></ul><h2 id="配置git-for-windows">配置Git for Windows</h2><p>已经有GibHub账号，这里简单记录git for windows的配置</p><p>打开Git Bash，设置用户名和邮箱。在命令行输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global user.name <span class="hljs-string">&quot;user_name&quot;</span> <span class="hljs-comment"># user_name 填入 GitHub 用户名</span><br>$ git config --global user.email <span class="hljs-string">&quot;user_email&quot;</span> <span class="hljs-comment"># user_email 填入 GitHub 注册的邮箱 </span><br></code></pre></td></tr></table></figure><p>配置 SSH key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;user.email&quot;</span> <span class="hljs-comment"># user.email 为GitHub 上注册的邮箱</span><br></code></pre></td></tr></table></figure><p>默认不需要设置密码。可以选择在指定的路径下产生ssh密钥：私钥id_rsa和公钥id_rsa.pub。将id_rsa.pub内容全部复制，打开GitHub_Settings_keys界面，新建<code>new SSH key</code></p><p><img src="/2025/02/06/2025-02-06-post1/image-20250205201400726.png" alt="image-20250205201400726" style="zoom:50%;"></p><p>标题任拟，将id_rsa.pub的内容复制到Key一栏，点击<code>Add SSH key</code>。通过ssh连接GiHub仓库需要<code>C:\Users\username\.ssh</code>路径下存有私钥文件id_rsa。用以下命令检测能否成功连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>参考<a href="https://fanlumaster.github.io/2021/03/23/Git-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86-VPN/">这篇文章</a>设置代理：</p><p><img src="/2025/02/06/2025-02-06-post1/image-20250205194742381.png" alt="image-20250205194742381" style="zoom:50%;"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global http.proxy <span class="hljs-string">&#x27;http://127.0.0.1:7890&#x27;</span><br>git config --global https.proxy <span class="hljs-string">&#x27;https://127.0.0.1:7890&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="安装node.js">安装node.js</h2><p>进入<a href="https://nodejs.org/en/">官网</a>下载windows版本，安装时勾选所有组件，并将其添加到系统环境变量</p><p>检验安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">node -v<br>npm -v<br></code></pre></td></tr></table></figure><h1 id="基于hexo框架搭建博客">基于Hexo框架搭建博客</h1><blockquote><p>官方文档： https://hexo.io/zh-cn/docs/</p></blockquote><p>“Hexo 是一个快速、简洁且高效的博客框架。 Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。”</p><p>GitHub：https://github.com/hexojs/hexo</p><p>Hexo 使用 Markdown语法解析存放在本地的文章内容，生成相应的html、css、js文件。 Github Pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，有了Hexo就可以在更新文章后快速批量生成相关页面，再将有改动的页面提交到Github，更新博客。这样大大节省我们的精力，使我们能够集中于文章的撰写。</p><h2 id="本文使用环境">本文使用环境</h2><ul><li>windows 10</li><li>node.js version — v22.13.1</li><li>npm ——v10.9.2</li><li>git version —2.42.0.windows.2</li></ul><h2 id="安装和初始化">安装和初始化</h2><p>git bash中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli <span class="hljs-comment"># 此命令完成对 hexo 的安装</span><br></code></pre></td></tr></table></figure><p>安装完成后，在本地新建文件夹(E:)存放博客的代码。这个文件夹将用于存放博客所有内容和素材，博客所有操作都在其中完成。</p><p>进入新建博客目录，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init <span class="hljs-comment"># hexo 在本地博客目录的初始化</span><br></code></pre></td></tr></table></figure><p>产生以下文件夹</p><p><img src="/2025/02/06/2025-02-06-post1/image-20250205204806684.png" alt="image-20250205204806684" style="zoom:50%;"></p><h2 id="生成静态文件">生成静态文件</h2><p>Git bash输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g  <span class="hljs-comment">#生成静态文件</span><br></code></pre></td></tr></table></figure><p>然后Hexo就会在public文件夹中生成相关html、js、css文件，待提交到<code>username.github.io</code>仓库中，渲染成网页。下面的index.html就是Hexo提供的HellowWorld模板。</p><p><img src="/2025/02/06/2025-02-06-post1/image-20250205204745104.png" alt="image-20250205204745104" style="zoom:50%;"></p><h2 id="本地预览">本地预览</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s <span class="hljs-comment">#开启本地预览</span><br></code></pre></td></tr></table></figure><p>通过本地预览可以实时查看博客的渲染效果。打开浏览器访问http://localhost:4000/即可查看内容，<code>Ctrl+C</code>停止本地预览。</p><p><img src="/2025/02/06/2025-02-06-post1/image-20250205205656259.png" alt="image-20250205205656259" style="zoom:50%;"></p><h2 id="上传到github">上传到Github</h2><p>首先安装部署插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save <span class="hljs-comment"># 安装部署插件</span><br></code></pre></td></tr></table></figure><p>Hexo有两种_config.yml文件，一种是根目录下的全局配置文件(站点配置文件)，另一种是各个主题下的主题配置文件。配置文件的参数可以在<a href="https://hexo.io/zh-cn/docs/configuration">此处</a>查询。我们先配置站点配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:chem1912/chem1912.github.io.git</span> <span class="hljs-comment">#(graminilune)</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>在Git bash中输入以下命令，部署到Github</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><p>打开https://username.github.io/</p><h2 id="更改主题">更改主题</h2><p>以常用主题NexT为例展示如何更换主题。</p><blockquote><p>官方文档 https://theme-next.iissnan.com/</p></blockquote><p>克隆next主题文件夹到站点目录的themes文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git themes/next<br></code></pre></td></tr></table></figure><p>打开站点配置文件，在Extensions段设置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">next</span><br></code></pre></td></tr></table></figure><p>切换主题之前使用hexo clean，然后hexo g，hexo s</p><p>可在NexT的主题配置文件中切换主题风格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Schemes</span><br>scheme: Muse<br><span class="hljs-comment">#scheme: Mist</span><br><span class="hljs-comment">#scheme: Pisces</span><br><span class="hljs-comment">#scheme: Gemini</span><br><br></code></pre></td></tr></table></figure><p>其他主题：</p><ul><li>fluid主题 https://fluid-dev.github.io/hexo-fluid-docs/</li><li>ocean主题https://github.com/zhwangart/hexo-theme-ocean?tab=readme-ov-file</li></ul><h2 id="渲染公式问题">渲染公式问题</h2><blockquote><p><a href="https://pku-zyf.github.io/formula/">Hexo渲染数学公式：配置方法与原理浅释</a></p><p><a href="https://stardustorr.github.io/2024/11/09/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/Hexo%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%B8%B2%E6%9F%93%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3/">Hexo中数学公式渲染失败的解决</a></p><p><a href="https://www.lingzhicheng.cn/2021/08/26/NunjucksErrors/">NunjucksErrors</a></p><p><a href="https://runninggump.github.io/2018/12/05/%E6%88%90%E5%8A%9F%E8%A7%A3%E5%86%B3%E5%9C%A8hexo%E4%B8%AD%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98/">成功解决在hexo中无法显示数学公式的问题</a></p></blockquote><p>安装新的渲染器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm uninstall hexo-renderer-marked --save<br>npm install hexo-renderer-pandoc --save<br></code></pre></td></tr></table></figure><p>在全局配置文件加入</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">math:</span><br>  <span class="hljs-attr">engine:</span> <span class="hljs-string">&#x27;mathjax&#x27;</span><br>  <span class="hljs-attr">mathjax:</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">custom_mathjax_source</span><br></code></pre></td></tr></table></figure><p>next的主题配置文件中加入</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span><br><span class="hljs-attr">mathjax:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># See: https://mhchem.github.io/MathJax-mhchem/</span><br>  <span class="hljs-attr">mhchem:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">cdn:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/mathjax@2.7.8/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span><br></code></pre></td></tr></table></figure><p>过于复杂的公式仍然容易解析失败：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Nunjucks Error: _posts/正则系综与恒温动力学.md [Line 13, Column 35] expected variable end<br></code></pre></td></tr></table></figure><p>此时需要对公式格式微调。一个例子是，以下公式中两个连续的花括号会使得渲染失败：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$<br>\hat H=\frac&#123;&#123;\bf p<span class="hljs-emphasis">_i&#125;^2&#125;&#123;2m_</span>i&#125;<br>$$<br></code></pre></td></tr></table></figure><p>需在花括号之间加入空格或字符：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$$<br>\hat H=\frac&#123; &#123;\bf p<span class="hljs-emphasis">_i&#125;^2&#125;&#123;2m_</span>i&#125;<br>$$<br></code></pre></td></tr></table></figure><h2 id="图床配置">图床配置</h2><blockquote><p><a href="https://zhuanlan.zhihu.com/p/319679704">搭建一个免费图床！彻底解决博客文章中图片存储问题！</a></p></blockquote><h3 id="新建github仓库并生成token">新建GitHub仓库并生成Token</h3><p>在GitHub上新建一个仓库blog_picture用于存储博客图片。</p><p>在账户全局设置处找到Developersettings，点击进入设置Token（注意需要时classic token）：</p><figure><img src="/2025/02/06/2025-02-06-post1/image-20250206143306923.png" alt="image-20250206143306923"><figcaption aria-hidden="true">image-20250206143306923</figcaption></figure><p>勾选user、workflow、write:packages、admin:org。</p><p>点击Generatetoken即可生成token。生成的token只会在第一次显示，需要及时保存。</p><h3 id="picgo配置github图床">PicGo配置GitHub图床</h3><p>PicGo是一个用于快速上传图片并获取图片URL链接的工具。可在<a href="https://github.com/Molunerfinn/PicGo/releases">此处</a>下载PicGo，使用指南在<a href="https://picgo.github.io/PicGo-Doc/zh/guide/">这里</a>。</p><p>安装好PicGo后可进一步配置。</p><p>首先可自定义快捷键，“Windows中快捷上传的快捷键是Ctrl+Shift+P，点击PicoGo 左侧栏的 PicGo设置和修改快捷键设置，可以按自己喜好修改快捷键。此外，PicGo有快速截图并上传的功能，在插件设置中搜索quick-capture，然后进行安装，默认的快捷键是Ctrl+Shift+0，也可以进行修改。”</p><p>另外可在设置内开启“上传前重命名”，使得在PicGo上传图片前弹出一个窗口让我们重命名图片。</p><p>设置GiHub图床：</p><p><img src="/2025/02/06/2025-02-06-post1/image-20250206114639973.png" alt="image-20250206114639973" style="zoom:33%;"></p><h3 id="typora配置picgo">Typora配置PicGo</h3><p><img src="/2025/02/06/2025-02-06-post1/image-20250206134459006.png" alt="image-20250206134459006" style="zoom: 33%;"></p><p>点击<code>验证图片上传选项</code>，如下图所示则为验证成功</p><p><img src="/2025/02/06/2025-02-06-post1/image-20250206115146219.png" alt="image-20250206115146219" style="zoom: 33%;"></p><h3 id="其他方案">其他方案</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/443980981">hexo-asset-img |Hexo 本地图片插件: 转换 图片相对路径 为 asset_img</a></p></blockquote><p>可以使用插件hexo-asset-image</p><p>首先安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-asset-image --save<br></code></pre></td></tr></table></figure><p>打开根目录下的<code>_config.yml</code>配置文件，将以下字段设为true</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>新建md文件时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&#x27;blog_name&#x27;</span> <span class="hljs-comment"># blog_name填入文章名字</span><br></code></pre></td></tr></table></figure><p>会同时创建与该文件名同名的文件夹，同时存放在<code>source/_post/</code>目录下。</p><p>文章的图片资源存放在该目录下，使用<code>Markdown</code>语法就可以链接到图片。</p><h1 id="结语">结语</h1><p>基于GiHub Pages + Hexo + PicGo + Typora搭建了博文写作的工作流，之后就是写作时间了。Enjoy Writing!</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/05/hello-world/"/>
    <url>/2025/02/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
